// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1388.Robot;
import org.usfirst.frc1388.UsbLogging;
import org.usfirst.frc1388.subsystems.Elevator;

/**
 *
 */
public class ElevatorInit extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private final Elevator elevator = Robot.elevator;
	
	private final double k_timeout = 10.0;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ElevatorInit() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        //this.setInterruptible(false);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	UsbLogging.printLog(">>> " + this.getClass().getSimpleName() + " started");
    	setTimeout(k_timeout);
    	elevator.setMotor(-1, true);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return elevator.isinitialized() || isTimedOut();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	elevator.setMotor(0, false);
    	UsbLogging.printLog("<<< " + this.getClass().getSimpleName() + " ended");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	UsbLogging.printLog("<<< " + this.getClass().getSimpleName() + " interrupted");
    	end();
    }
}
