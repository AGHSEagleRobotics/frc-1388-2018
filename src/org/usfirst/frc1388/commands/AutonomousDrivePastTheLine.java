// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc1388.Robot;
import org.usfirst.frc1388.subsystems.*;

/**
 *
 */
public class AutonomousDrivePastTheLine extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousDrivePastTheLine() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	String gameData = Robot.gameData;
		String position = Robot.fieldPos;

		// game data must NOT be empty, must be 3 chars in length
		// *game data chars must only be L OR R
		// game data chars cant be numbers

		// position must NOT be empty, must be 1 char in length
		// *position chars must be L OR C OR R
		// position chars cant be numbers



		if(gameData == null)
			return;

		if(gameData.equals(""))
			return;

		if(gameData.length() != 3)
			return;

		if(position.length() != 1)
			return;

		char[] checkGameData = gameData.toCharArray();

		for(char c : checkGameData) {
			if(!(Character.isLetter('L') || Character.isLetter('R')))
				return;
		}

		char[] checkPosition = position.toCharArray();

		for(char c : checkGameData) {
			if(!(Character.isLetter('L') || Character.isLetter('R') || Character.isLetter('C')))
				return;

		}
		// check each char and compare to 'L' and 'R'
		// *google search "check char in string for letter"
		//.indexOf()
		//.contains()
		/*
			if(position.indexOf("L") != -1|| position.indexOf("R") != -1) {
				if( position.contains("LLL")|| position.contains("LRL")|| position.contains("LLR")) {
				}
				if( position.contains("RLL")|| position.contains("RRL")|| position.contains("RLR") )

					if( gameData != null ) { // eliminate this
						if( gameData.length() ==  3  ) { //eliminate this
							if( gameData.substring(0, 1).equals( "L" )) {
								if( position.length() == 1) { //eliminate
									if(position.substring(0,1).equals("L")) {
										//Something 
									}
									if(position.substring(0,1).equals("C")) {
										//Something 
									}
									if(position.substring(0,1).equals("R")) {
										//Something 
									}
								}
							}
							else if( gameData.substring(0,1).equals("R") ){
								if( position.length() == 1) {
									if(position.substring(0,1).equals("L")) {
										//Something 
									}
									if(position.substring(0,1).equals("C")) {
										//Something 
									}
									if(position.substring(0,1).equals("R")) {
										//Something 
									}
								}
							}
						}
					}
			}
		 */
    } 
}
