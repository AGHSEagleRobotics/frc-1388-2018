// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.commands;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1388.Robot;
import org.usfirst.frc1388.RobotMap;

/**
 *
 */
public class RunIntake extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public RunIntake() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intake);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
       
// Should a deadband be added?
// Simple example:
       if ((intake.y < DEADBAND) && (intake.y > -DEADBAND)) intake.y = 0;
       if ((intake.x < DEADBAND) && (intake.x > -DEADBAND)) intake.x = 0;
       
// Joystick and motors can refer to subsystem rather than RobotMap
    	if( intake.y > 0) {
    		intake.leftFork.set(intake.y);
    		intake.rightFork.set(intake.y);
    	}else if(intake.y < 0 ) {
    		intake.leftFork.set(intake.y);
    		intake.rightFork.set(intake.y);
    	}else if( intake.x > 0 ) {
    		intake.leftFork.set(intake.x);
    		intake.rightFork.set(-intake.x);	
    	}
    	else if( intake.x > 0 ) {
    		intake.leftFork.set(-intake.x);
    		intake.rightFork.set(intake.x);	
    	}
// What should happen if both x and y are zero?
// What happens if y is > 0 and x is also > 0?

// What would this do?
    intake.leftFork.set(y + x);
    intake.rightFork.set(y - x);

    }
    
    
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
