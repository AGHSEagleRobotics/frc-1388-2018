// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.commands;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1388.Robot;
import org.usfirst.frc1388.RobotMap;
import org.usfirst.frc1388.subsystems.Intake;

/**
 *
 */
public class RunIntake extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private final double k_deadband = 0.2; // tbd, best guess based on experience with controllers
	private final double k_yMultiplier = 1.2; // so that the y is more likely than the x because u wanna succ more
	private final Intake intake = Robot.intake;
	
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public RunIntake() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double y = applyDeadband(Robot.oi.getOpController().getY(Hand.kLeft));
    	double x = applyDeadband(Robot.oi.getOpController().getX(Hand.kLeft));
    	
    	
    	// if the y times the multiplier is greater than x then run intake motors in same direction
    	if (Math.abs(y) * k_yMultiplier >= Math.abs(x)) {
    		intake.leftMotor.set(y);
    		intake.rightMotor.set(-y); // not sure which one needs to be inverted
    		
    	// or run them in opposite directions
    	} else {
    		intake.leftMotor.set(x);
    		intake.rightMotor.set(x); // not inverted because need to go in opposite directions
    	}
    	
    }
    
    
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
    
    public double applyDeadband(double value) {
    	if(Math.abs(value) < k_deadband)
    		return 0.0;
    	
    	return value;
    }
}
