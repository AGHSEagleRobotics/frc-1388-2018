// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import java.util.ArrayList;

import org.usfirst.frc1388.subsystems.*;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    
    ArrayList<String> toScript = new ArrayList<>();
    toScript.add("drived 100.5");
    String delims = "[ ]+";
    String[] tokens;
    String command;
    String param;
    
    for(String s: toScript) {
    	tokens = s.split(delims);    			
    	command = tokens[0].toLowerCase();
    	param = tokens[1].toLowerCase();
    	
    	switch(command) {
    	case "drived":
    		addSequential(new AutonomousDrive(Double.parseDouble(param)));
    		break;
    	case "drivet": 
    		addSequential(new AutonomousDrive(Integer.parseInt(param)));
    		break;
    	case "turna": 
    		addSequential(new AutonomousTurn(Double.parseDouble(param)));
    		break;
    	case "turnt": 
    		addSequential(new AutonomousTurn(Integer.parseInt(param)));
    		break;
    	case "ele": 
    		addSequential(new AutonomousMoveElevator(param));
    		break;
    	case "fork": 
    		addSequential(new AutonomousMoveFork(param));
    		break;
    	default:
    		break;
    	}
    }
    
    } 
}
