// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc1388.Position;
import org.usfirst.frc1388.Priority;
import org.usfirst.frc1388.Robot;
import org.usfirst.frc1388.subsystems.*;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATEE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	
    	Position position = Robot.fieldPosition; // Enum equal to value set in positionSelector SendableChooser, set in autonInit
    	Priority priority = Robot.autonPriority; // Enum equal to value set in autonSelector SendableChooser, set in autonInit
    	
    	String gameData = Robot.gameData; // 3-char string from FMS / Driver Station
    	
    	switch (priority) {
    		case SCALE:
    	    	if(position.equals(Position.CENTER))
    	    		runLine();
    			runScale(position);
    			break;
    		case SWITCH:
    	    	if(position.equals(Position.CENTER))
    	    		runLine();
    			runSwitch(position);
    			break;
    		default:
    			runLine();
    			break;
    	}
    	
    }
    
    public void runSwitch(Position position) {
    	// check starting position of Robot
    }
    
    public void runScale(Position position) {
    	
    }
    
    public void runLine() {
    	
    }
    
    

}
