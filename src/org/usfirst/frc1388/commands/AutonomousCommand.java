// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc1388.Position;
import org.usfirst.frc1388.Priority;
import org.usfirst.frc1388.Robot;
import org.usfirst.frc1388.subsystems.*;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {

	private Position position;
	private Priority priority;
	private String gameData;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATEE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	
    	position = Robot.fieldPosition; // Enum equal to value set in positionSelector SendableChooser, set in autonInit
    	priority = Robot.autonPriority; // Enum equal to value set in autonSelector SendableChooser, set in autonInit
    	
    	gameData = Robot.gameData; // 3-char string from FMS / Driver Station / ex. "LRL"
    	
    	priority = checkOptimal(position, gameData);
    	
    	//test right side, scale, LRL
    	switch (priority) {
    		case SCALE:
    			String scaleSide = gameData.substring(1, 2);
    			
    	    	if(position.equals(Position.CENTER)) {
    	    		runLine();
    	    		break;
    	    	}
    	    	
    	    	runScale(position, scaleSide);
    			
    		case SWITCH:
    			String switchSide = gameData.substring(0, 1);
    			
    	    	if(position.equals(Position.CENTER)) {
    	    		runLine();
    	    		break;
    	    	}
    	    	
    			runSwitch(position, switchSide);
    			break;
    			
    		default:
    			runLine();
    			break;
    	}
    	
    }
    
    public void runSwitch(Position position, String switchSide) {
    	// drive straight 168 - 1/2 of the length of bot( 13.875 ) amount turn 90D and drive straight again 85.25 amount - 1/2 bot length( 13.875 ) 
    
    	
    }
    
    public void runScale(Position position, String scaleSide) {
    	//inches
    	// drive straight 324 - 1/2 of the length of bot( 13.875 ) amount turn 90D and drive straight again 71.57 amount - 1/2 bot length( 13.875 ) 
    }
    
    public void runLine() {
    	// drive straight X amount
    }
    
    /**
     * 
     * 
     * @param position Position to compare with gameData item
     * @param gameData gameData substring to compare with Position
     * 
     * @return True if position and gameData are on the same side, false if otherwise
     */
    public boolean compare(Position position, String gameData) {
    	if(position.equals(Position.LEFT) && gameData.equals("L")) {
    		return true;
    		
    	} else if (position.equals(Position.RIGHT) && gameData.equals("R")) {
    		return true;
    		
    	} else {
    		return false;
    		
    	}
    	
    }
    
    public Priority checkOptimal(Position position, String gameData) {
    	
    	if(gameData.length() != 3 || position == null)
    		return Priority.LINE;
    	
    	String switchSide = gameData.substring(0, 1);
    	String scaleSide = gameData.substring(1, 2);
    	
    	if(this.priority.equals(Priority.SWITCH)) {
    		
    		if(compare(position, switchSide)) {
    			return Priority.SWITCH;
    			
    		} else if (compare(position, scaleSide)) {
    			return Priority.SCALE;
    			
    		} else {
    			return Priority.LINE;
    			
    		} //end nested else
    		
    	} else {
    		if(compare(position, scaleSide)) {
    			return Priority.SCALE;
    			
    		} else if (compare(position, switchSide)) {
    			return Priority.SWITCH;
    			
    		} else {
    			return Priority.LINE;
    			
    		} // nested else
    		
    	} // else
    	
    } // checkOptimal()
    
    

}


