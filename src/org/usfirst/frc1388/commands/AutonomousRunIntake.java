// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1388.Robot;
import org.usfirst.frc1388.UsbLogging;
import org.usfirst.frc1388.subsystems.Intake;

/**
 *
 */
public class AutonomousRunIntake extends Command {
	
	private String direction; // either "in" or "out"
	private final Intake intake = Robot.intake;
	private final int k_secondsIn = 4;
	private final int k_secondsOut = 1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousRunIntake(String direction) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		this.direction = direction;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	UsbLogging.printLog(">>> " + this.getClass().getSimpleName() + " started");
    	//check if one of 3 options
    	//initialize option
    	if (direction.equals("in")) {

    		setTimeout(k_secondsIn);
    		
    	} else if(direction.equals("out")) {
    		
    		setTimeout(k_secondsOut);
    		
    	} else {
    		
    		setTimeout(0);
    		
    	}
    	System.out.println("AutonomousMoveFork init");
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	if (direction.equals("in")) {
    		
    		intake.leftMotor.set(1);
    		intake.rightMotor.set(-1);
    		
    	} else if(direction.equals("out")) {
    		
    		intake.leftMotor.set(-1);
    		intake.rightMotor.set(1);
    		
    	} else {
    		
    		intake.leftMotor.set(0);
    		intake.rightMotor.set(0);
    	}
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return isTimedOut();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	intake.leftMotor.set(0);
		intake.rightMotor.set(0);
    	UsbLogging.printLog("<<< " + this.getClass().getSimpleName() + " ended");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	UsbLogging.printLog("<<< " + this.getClass().getSimpleName() + " interrupted");
    	end();
    }
}
